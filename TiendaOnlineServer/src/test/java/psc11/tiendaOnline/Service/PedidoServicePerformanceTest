package psc11.tiendaOnline.Service;

import static org.mockito.Mockito.when;

import java.util.Arrays;

import org.databene.contiperf.PerfTest;
import org.databene.contiperf.Required;
import org.databene.contiperf.junit.ContiPerfRule;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import psc11.tiendaOnline.Dao.PedidoRepository;
import psc11.tiendaOnline.DataDomain.Estado;
import psc11.tiendaOnline.DataDomain.Pedido;
import psc11.tiendaOnline.DataDomain.TipoUsuario;
import psc11.tiendaOnline.DataDomain.Usuario;

@RunWith(MockitoJUnitRunner.class)
public class PedidoServicePerformanceTest {

    private PedidoService pedidoService;
    @Mock
    private PedidoRepository pedidoRepository;
    @Mock
    private PlatoService platoService;
    @Mock
    private Pedido pedido;
    @Mock
    private Pedido pedido1;
    @Mock
    private Usuario usuario;

    @Rule public ContiPerfRule rule = new ContiPerfRule();

    @Before
    public void setUp() {
        pedido = new Pedido(new Usuario(), Estado.Preparacion);
        pedido.setId(1);
        usuario = new Usuario("contr", "dni", "nombre", "correo", null, TipoUsuario.Administrador);
        pedido1 = new Pedido(usuario, Estado.Entregado);
        pedido1.setId(2);
        this.pedidoService = new PedidoService(this.pedidoRepository, this.platoService);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testGetPedido() {
        pedido.setId(1);
        when(pedidoRepository.findById(1)).thenReturn(pedido);
        Pedido result = pedidoService.getPedido(1);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testGetAllPedidos() {
        when(pedidoService.getAllPedidos()).thenReturn(Arrays.asList(pedido, pedido1));
        pedidoService.getAllPedidos();
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testAddPedido() {
        when(pedidoService.addPedido(any(Pedido.class))).thenReturn(pedido);
        pedidoService.addPedido(pedido);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testUpdatePedido() {
        pedido.setEstado(Estado.Reparto);
        when(pedidoService.updatePedido(pedido, 1)).thenReturn(pedido);
        pedidoService.updatePedido(pedido, 1);
    }
}

