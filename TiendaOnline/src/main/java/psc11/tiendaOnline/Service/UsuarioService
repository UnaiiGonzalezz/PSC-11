import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import psc11.tienaonline.DataDomain.Usuario;
import psc11.tienaonline.DataDomain.Usuario.TipoUsuario;
import psc11.tienaonline.DataDomain.UsuarioRepository;

@Service
public class UsuarioService {

    private final UsuarioRepository usuarioRepository;
    private final String connectionString;

    @Autowired
    public UsuarioService(UsuarioRepository usuarioRepository) {
        this.usuarioRepository = usuarioRepository;
        this.connectionString = "jdbc:sqlite:TiendaOnline.db";
        loadDatos();
    }

    /** @brief Carga todos los usuarios de la base de datos y los guarda en el repositorio de usuarios */
    public void loadDatos() {
        String sql = "SELECT * FROM usuario";

        try (Connection con = DriverManager.getConnection(connectionString);
             PreparedStatement pStmt = con.prepareStatement(sql);
             ResultSet rs = pStmt.executeQuery()) {

            while (rs.next()) {
                Usuario usuario = new Usuario(
                    rs.getString("nombre"),
                    rs.getString("contrase√±a"),
                    rs.getDouble("saldo"),
                    TipoUsuario.valueOf(rs.getString("tipoUsuario"))
                );
                usuario.setId(rs.getInt("id"));
                usuarioRepository.save(usuario);
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Log the exception for debugging purposes
        }
    }

    /** @brief Coge el usuario por el id
     *  @return Devuelve el usuario si coincide con el id
     */
    public Usuario getUsuario(int id) {
        return usuarioRepository.findById(id).orElse(null);
    }

    /** @brief Coge todos los usuarios
     *  @return Lista de los usuarios del repositorio
     */
    public List<Usuario> getAllUsuarios() {
        return usuarioRepository.findAll();
    }

    /** @brief Coge el usuario por nombre
     *  @return Devuelve el usuario si coincide con el nombre
     */
    public Usuario getUsuarioByNombre(String nombre) {
        return usuarioRepository.findByNombre(nombre).orElse(null);
    }

    public Usuario addUsuario(Usuario usuario) {
        return usuarioRepository.save(usuario);
    }

    public Usuario updateUsuario(Usuario usuario, int id) {
        return usuarioRepository.findById(id).map(existingUsuario -> {
            existingUsuario.setNombre(usuario.getNombre());
            existingUsuario.setContrasenya(usuario.getContrasenya());
            existingUsuario.setSaldo(usuario.getSaldo());
            existingUsuario.setTipoUsuario(usuario.getTipoUsuario());
            return usuarioRepository.save(existingUsuario);
        }).orElse(null);
    }

    public void deleteUsuario(int id) {
        usuarioRepository.findById(id).ifPresent(usuarioRepository::delete);
    }
}
