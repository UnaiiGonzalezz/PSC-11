package java.Ventanas;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JTable;

import java.DataDomain.Plato;
import java.DataDomain.Usuario;

import javax.swing.JButton;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;

public class VentanaCliente extends JFrame {

	private JFrame ventanaUsuario;
	private JTable tablaProductos;

	/**
	 * Create the application.
	 */
	public VentanaCliente(Usuario u) {
		inicializar(u);
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void inicializar(Usuario u) {
		ventanaUsuario = new JFrame();
		ventanaUsuario.setBounds(100, 100, 670, 399);
		ventanaUsuario.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel panelCentral = new JPanel();
		panelCentral.setBackground(new Color(255, 235, 205));
		ventanaUsuario.getContentPane().add(panelCentral, BorderLayout.CENTER);

		tablaProductos = new JTable();
		tablaProductos.setModel(new DefaultTableModel(new Object[][] {}, new String[] { "Nombre", "Precio", "Disponible" }));
		tablaProductos.setForeground(new Color(192, 192, 192));
		panelCentral.add(tablaProductos);
		DefaultTableModel def = new DefaultTableModel();
		def.addColumn(u);

		JPanel panelSur = new JPanel();
		panelSur.setBackground(new Color(255, 255, 240));
		ventanaUsuario.getContentPane().add(panelSur, BorderLayout.SOUTH);

		JButton btnCerrarSesion = new JButton("Cerrar Sesión");
		btnCerrarSesion.setBackground(Color.RED);
		btnCerrarSesion.setFont(new Font("Tahoma", Font.PLAIN, 10));
		btnCerrarSesion.setForeground(Color.BLACK);
		JButton btnCambiarContrasenya = new JButton("Cambiar Contraseña");
		btnCambiarContrasenya.setBackground(Color.ORANGE);
		btnCambiarContrasenya.setFont(new Font("Tahoma", Font.PLAIN, 10));
		btnCambiarContrasenya.setForeground(Color.BLACK);
		
		//JButton btnActualizarSaldo = new JButton("Actualizar Saldo");
		//btnActualizarSaldo.setBackground(Color.GREEN);
		//btnActualizarSaldo.setFont(new Font("Tahoma", Font.PLAIN, 10));
		//btnActualizarSaldo.setForeground(Color.BLACK);
		
		JButton btnVerVentas = new JButton("Ver Compras");
		btnVerVentas.setBackground(Color.ORANGE);
		btnVerVentas.setFont(new Font("Tahoma", Font.PLAIN, 10));
		btnVerVentas.setForeground(Color.BLACK);
		GroupLayout gl_panelSur = new GroupLayout(panelSur);
		gl_panelSur.setHorizontalGroup(
			gl_panelSur.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_panelSur.createSequentialGroup()
					.addContainerGap()
					.addComponent(btnCerrarSesion)
					//.addComponent(btnActualizarSaldo)
					.addPreferredGap(ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
					.addComponent(btnVerVentas)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnCambiarContrasenya)
					.addGap(24))
		);
		gl_panelSur.setVerticalGroup(
			gl_panelSur.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panelSur.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_panelSur.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnCambiarContrasenya, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnCerrarSesion)
						//.addComponent(btnActualizarSaldo)
						.addComponent(btnVerVentas))
					.addContainerGap(22, Short.MAX_VALUE))
		);
		panelSur.setLayout(gl_panelSur);
		
		JPanel panelNorte = new JPanel();
		panelNorte.setBackground(new Color(255, 235, 205));
		ventanaUsuario.getContentPane().add(panelNorte, BorderLayout.NORTH);

		JLabel lblTitulo = new JLabel("Bienvenido ");
		lblTitulo.setFont(new Font("Kunstler Script", Font.PLAIN, 24));
		GroupLayout gl_panelNorte = new GroupLayout(panelNorte);
		gl_panelNorte
				.setHorizontalGroup(gl_panelNorte.createParallelGroup(Alignment.LEADING).addGroup(Alignment.TRAILING,
						gl_panelNorte.createSequentialGroup().addContainerGap(255, Short.MAX_VALUE)
								.addComponent(lblTitulo, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
								.addGap(233)));
		gl_panelNorte.setVerticalGroup(gl_panelNorte.createParallelGroup(Alignment.LEADING).addGroup(Alignment.TRAILING,
				gl_panelNorte.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addComponent(lblTitulo)
						.addContainerGap()));
		panelNorte.setLayout(gl_panelNorte);

		/**
		 * Botón que abrirá un cuadro de diálogo para cambiar la contraseña del usuario
		 */
		
		btnCambiarContrasenya.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String nuevaContraseña = JOptionPane.showInputDialog("Introduce la nueva contraseña: ");
				Usuario nuevo = new Usuario(u.getName(), nuevaContraseña, u.getPurse(), 0);
				String hostname = "localhost";
				String port = "8080";

				TheClient nuevoCliente = new TheClient(hostname, port);
				nuevoCliente.eliminarUsuario(u);
				nuevoCliente.registrarUsuario(nuevo.getName(), nuevo.getPassword(), nuevo.getPurse(), 0);
				new LoginWindow();
				dispose();
			}

		});
		
		//btnActualizarSaldo.addActionListener(new ActionListener() {
			
			//@Override
			//public void actionPerformed(ActionEvent e) {
				//String cantidad = JOptionPane.showInputDialog("Introduce la cantidad que deseas agregar: ");
				//String hostname = "localhost";
				//String port = "8080";

				//TheClient nuevoCliente = new TheClient(hostname, port);
				//nuevoCliente.actualizarSaldo(u,Double.parseDouble(cantidad),u.getPurse());
				//dispose();
			//}
		//});
		
		btnVerVentas.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		    	String hostname = "localhost";
				String port = "8080";

				TheClient nuevoCliente = new TheClient(hostname, port);
		        List<SaleData> ventas = nuevoCliente.obtenerVentas();
		        if (ventas != null) {
		            StringBuilder mensaje = new StringBuilder();
		            mensaje.append("Productos comprados por el usuario: ").append(u.getName()).append("\n");
		            int cont = 0;
	            	for (SaleData venta : ventas) {
	            		if (venta.getBuyer().equals(u.getName())) {
			                mensaje.append("Producto: ").append(venta.getNameProduct()).append("\n");
			                mensaje.append("Precio: ").append(venta.getPriceProduct()).append("\n");
			                mensaje.append("--------------------------------------\n");
			                cont++;
	            		}
		            }
	            	if (cont == 0) {
	            		mensaje.append("Este usuario no tiene ventas");
	            	}
		            JOptionPane.showMessageDialog(null, mensaje.toString(), "Ventas", JOptionPane.INFORMATION_MESSAGE);
		        } else {
		            JOptionPane.showMessageDialog(null, "Error al recuperar las ventas", "Error", JOptionPane.ERROR_MESSAGE);
		        }
		    }
		});

		String hostname = "localhost";
		String port = "8080";

		TheClient nuevoCliente = new TheClient(hostname, port);
		List<ProductData> productos = nuevoCliente.obtenerProductosDisponibles();
		for (ProductData prod : productos) {
			JPanel panel = new JPanel();
			panel.setLayout(new GridLayout(7, 0, 0, 0));

			panel.add(new JLabel(prod.getName()));
			JLabel nombre = new JLabel(prod.getName());
			double p = prod.getPrice();
			String textoPrecio = Double.toString(p);

			panel.add(new JLabel(textoPrecio));
			JLabel etiquetaPrecio = (new JLabel(textoPrecio));

			JLabel precio = new JLabel(textoPrecio);
			JButton botonComprar = new JButton("¡COMPRAR!");
			botonComprar.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					String hostname = "localhost";
					String port = "8080";
					boolean a = false;
					TheClient nuevoCliente = new TheClient(hostname, port);
					a = nuevoCliente.comprarProducto(u, Double.parseDouble(etiquetaPrecio.getText()), nombre.getText());
					if (a == true) {
						botonComprar.setEnabled(false);
						Product p = new Product(prod.getName(), prod.getPrice(), prod.isAvailable());
						nuevoCliente.agregarVenta(u.getName(), p);
					}
				}
			});

			panel.add(botonComprar);
			panel.setBorder(BorderFactory.createLineBorder(Color.black));
			panelCentral.add(panel);
			panelCentral.updateUI();
		}
		
		btnCerrarSesion.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				new LoginWindow();
				dispose();
			}
		});
	}

	public void setVisible(boolean b) {
		ventanaUsuario.setVisible(b);
	}
}

