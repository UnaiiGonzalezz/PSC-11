package psc11.tiendaOnline.Service;

import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.any;

import java.util.Arrays;

import org.databene.contiperf.PerfTest;
import org.databene.contiperf.Required;
import org.databene.contiperf.junit.ContiPerfRule;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import psc11.tiendaOnline.DataDomain.Plato;
import psc11.tiendaOnline.DataDomain.Categoria;
import psc11.tiendaOnline.Dao.PlatoRepository;

@RunWith(MockitoJUnitRunner.class)
public class PlatoServicePerformanceTest {

    private PlatoService platoService;
    @Mock
    private PlatoRepository platoRepository;
    @Mock
    private Plato plato;
    @Mock
    private Plato plato1;

    @Rule public ContiPerfRule rule = new ContiPerfRule();

    @Before
    public void setUp() {
        plato = new Plato(Categoria.Entrante, "Descripcion", "Nombre", 5, "Normal");
        plato.setId(1);
        plato1 = new Plato(Categoria.Batido, "Descripcion", "Nombre", 3, "Grande");
        plato1.setId(2);
        this.platoService = new PlatoService(this.platoRepository);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testGetPlato() {
        when(platoRepository.findById(1)).thenReturn(plato);
        Plato plato1 = platoService.getPlato(1);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testGetByCategoria() {
        when(platoService.getAllPlatos()).thenReturn(Arrays.asList(plato, plato1));
        platoService.getByCategoria(Categoria.Entrante);
        platoService.getByCategoria(Categoria.Batido);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testGetAllPlatos() {
        when(platoService.getAllPlatos()).thenReturn(Arrays.asList(plato));
        platoService.getAllPlatos();
    }

    // @Test
    // @PerfTest(invocations = 500, threads = 10)
    // @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    // public void testAddPlato() {
    //     Plato plato = new Plato();
    //     when(platoService.addPlato(any(Plato.class))).thenReturn(plato);
    //     platoService.addPlato(plato);
    // }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testUpdatePlato() {
        when(platoRepository.findById(1)).thenReturn(plato);
        Plato platoViejo = new Plato();
        platoViejo.setId(1);
        platoViejo.setNombre("Patatas");
        platoService.updatePlato(platoViejo, 1);
        platoService.updatePlato(platoViejo, 2);
    }

    @Test
    @PerfTest(invocations = 500, threads = 10)
    @Required(max = 1200, average = 250, throughput = 50, totalTime = 10000)
    public void testDeletePlato() {
        when(platoRepository.findById(1)).thenReturn(plato);
        platoService.deletePlato(1);
        when(platoRepository.findById(1)).thenReturn(null);
        platoService.deletePlato(1);
    }
}
